const gates = require('./gates')

test('test gates of A', () => {
    expect(gates('A')).toEqual([[0, 0], [0, -1]]);
});

test('test gates of T', () => {
    expect(gates('T')).toEqual([[0, 0], [0, 1]]);
});

test('test gates of G', () => {
    expect(gates('G')).toEqual([[0, 1], [0, 0]]);
});

test('test gates of C', () => {
    expect(gates('C')).toEqual([[0, -1], [0, 0]]);
});

test('test gates of invlid', () => {
    expect(gates('N')).toEqual([[0, 0], [0, 0]]);
});

test('test gates of ATG', () => {
    expect(gates('ATG')).toEqual([[0, 0, 0, 1],
        [0, -1, 0, 0]]);
});

test('test gates of TTC', () => {
    expect(gates('TTC')).toEqual([[0, 0, 0, -1],
        [0, 1, 2, 2]]);
});

const randic = require('./randic')

test('test randic of A', () => {
    expect(randic('A')).toEqual([[0, 1], [0, 3]]);
});

test('test randic of T', () => {
    expect(randic('T')).toEqual([[0, 1], [0, 2]]);
});

test('test randic of G', () => {
    expect(randic('G')).toEqual([[0, 1], [0, 1]]);
});

test('test randic of C', () => {
    expect(randic('C')).toEqual([[0, 1], [0, 0]]);
});

test('test randic of invlid', () => {
    expect(randic('N')).toEqual([[0, 1], [0, 4]]);
});

test('test randic of ATG', () => {
    expect(randic('ATG')).toEqual([[0, 1, 2, 3],
        [0, 3, 2, 1]]);
});

test('test randic of TTC', () => {
    expect(randic('TTC')).toEqual([[0, 1, 2, 3],
        [0, 2, 2, 0]]);
});

const squiggle = require('./squiggle')
const jsc = require('jsverify')

test('test squiggle of A', () => {
    expect(squiggle('A')).toEqual([[0, 0.5, 1], [0, 0.5, 0]]);
});

test('test squiggle of T', () => {
    expect(squiggle('T')).toEqual([[0, 0.5, 1], [0, -0.5, -1]]);
});

test('test squiggle of G', () => {
    expect(squiggle('G')).toEqual([[0, 0.5, 1], [0, 0.5, 1]]);
});

test('test squiggle of C', () => {
    expect(squiggle('C')).toEqual([[0, 0.5, 1], [0, -0.5, 0]]);
});

test('test squiggle of invlid', () => {
    expect(squiggle('N')).toEqual([[0, 0.5, 1], [0, 0, 0]]);
});

test('test squiggle of ATG', () => {
    expect(squiggle('ATG')).toEqual([[0, 0.5, 1.0, 1.5, 2.0, 2.5, 3.0],
        [0, 0.5, 0, -0.5, -1.0, -0.5, 0.0]]);
});

test('test squiggle of TTC', () => {
    expect(squiggle('TTC')).toEqual([[0, 0.5, 1.0, 1.5, 2.0, 2.5, 3.0],
        [0, -0.5, -1.0, -1.5, -2.0, -2.5, -2.0]]);
});
const yau_bp = require('./yau-bp')

test('test yau_bp of A', () => {
    expect(yau_bp('A')).toEqual([[0, 1], [0, -1]]);
});

test('test yau_bp of T', () => {
    expect(yau_bp('T')).toEqual([[0, 1], [0, 1]]);
});

test('test yau_bp of G', () => {
    expect(yau_bp('G')).toEqual([[0, 1], [0, -0.5]]);
});

test('test yau_bp of C', () => {
    expect(yau_bp('C')).toEqual([[0, 1], [0, 0.5]]);
});

test('test yau_bp of invlid', () => {
    expect(yau_bp('N')).toEqual([[0, 1], [0, 0]]);
});

test('test yau_bp of ATG', () => {
    expect(yau_bp('ATG')).toEqual([[0, 1, 2, 3],
    [0, -1, 0, -0.5]]);
});

test('test yau_bp of TTC', () => {
    expect(yau_bp('TTC')).toEqual([[0, 1, 2, 3],
    [0, 1, 2, 2.5]]);
});
const yau = require('./yau')

test('test yau of A', () => {
    expect(yau('A')).toEqual([[0, 0.5], [0, -(3 ** 0.5) / 2]]);
});

test('test yau of T', () => {
    expect(yau('T')).toEqual([[0, 0.5], [0, (3 ** 0.5) / 2]]);
});

test('test yau of G', () => {
    expect(yau('G')).toEqual([[0, (3 ** 0.5) / 2], [0, -0.5]]);
});

test('test yau of C', () => {
    expect(yau('C')).toEqual([[0, (3 ** 0.5) / 2], [0, 0.5]]);
});

test('test yau of invlid', () => {
    expect(yau('N')).toEqual([[0, 0], [0, 0]]);
});

test('test yau of ATG', () => {
    expect(yau('ATG')).toEqual([[0, 0.5, 1, 1 + (3**0.5)/2],
    [0, -(3**0.5)/2, 0, -0.5]]);
});

test('test yau of TTC', () => {
    expect(yau('TTC')).toEqual([[0, 0.5, 1, 1 + (3**0.5)/2],
    [0, (3**0.5)/2, (3**0.5), (3**0.5) + 0.5]]);
});



const newResult: Array<Array<number>> = []
  for (let i = 0; result[0].length; i++) {
    const newArr: Array<number> = []
    newArr.push(result[0][i])
    newArr.push(result[1][i])
    newResult.push(newArr)
  }

benchmark switch later

S_2 != 'A' && S_2 != 'T' && S_2 != 'U' && S_2 != 'G' && S_2 != 'C'
S_2 != 'A' && S_2 != 'T' && S_2 != 'U' && S_2 != 'G' && S_2 != 'C'
if (S_2 != 'A' && S_2 != 'T' && S_2 != 'U' && S_2 != 'G' && S_2 != 'C') {
      throw new Error('non-atgcu base')
    }



# DNAViz
![CI/CD](https://github.com/Lab41/dnaviz/workflows/CI/CD/badge.svg)

DNAViz is an npm library for DNA visualization functions in Node, the browser, and beyond. Using six different visualization methods, easily convert any sequence of DNA or RNA into human readible data sets. Easily analyze and compare fasta files.

## Installation

Make sure you have node.js 12+ or yarn installed. If not download node [here](https://nodejs.org/en/) or yarn [here](https://classic.yarnpkg.com/en/). To run the current version of DNAViz in your program, first initialize it and then run:

```
$ npm install --save-dev dnaviz
```

Or, with yarn:

```
$ yarn add --dev dnaviz
```

## Usage

Using DNAViz in a Javascript or Typescript file is as simple as:

```Typescript
import * as dna from 'dnaviz';
```

For specific functions and methods of visualization, take a look at the documentation [here](https://lab41.github.io/dnaviz/). 

## Citation

pass
